<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Python on 一哥黑板报</title>
    <link>/tags/Python/</link>
    <description>Recent content in Python on 一哥黑板报</description>
    <generator>Hugo</generator>
    <language>en</language>
    <lastBuildDate>Wed, 16 Jul 2025 11:59:55 +0800</lastBuildDate>
    <atom:link href="/tags/Python/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>fudge使用文档</title>
      <link>/posts/fudge-using-document/</link>
      <pubDate>Sat, 20 Oct 2012 00:00:00 +0000</pubDate>
      <guid>/posts/fudge-using-document/</guid>
      <description>&lt;p&gt;fudge是一个python的mock框架，我非常喜欢它。决定把使用文档翻译出来。&lt;/p&gt;&#xA;&lt;h2 id=&#34;fudging-a-web-service&#34;&gt;&#xA;  Fudging a Web Service&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#fudging-a-web-service&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;当测试一个使用web服务的代码时，你可能想快速的设置一个不依赖于真实的在互联网上的web服务。这是一个使用mock对象的好的方式。假设你又一个Twitter的机器人，看起来像这样：&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-Python&#34; data-lang=&#34;Python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; oauthtwitter&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;post_msg_to_twitter&lt;/span&gt;(msg):&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;...&lt;/span&gt;     api &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; oauthtwitter&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;OAuthApi(&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;...&lt;/span&gt;         &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;lt;consumer_key&amp;gt;&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;lt;consumer_secret&amp;gt;&amp;#39;&lt;/span&gt;,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;...&lt;/span&gt;         &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;lt;oauth_token&amp;gt;&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;lt;oauth_token_secret&amp;gt;&amp;#39;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;...&lt;/span&gt;     )&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;...&lt;/span&gt;     api&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;UpdateStatus(msg)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;...&lt;/span&gt;     print &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Sent: &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;%s&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; msg&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;因为&#xA;  &lt;a href=&#34;http://code.google.com/p/oauth-python-twitter/&#34;&gt;oauthtwitter&lt;/a&gt;是独立维护的，你的代码只要调用了正确的方法，就能正常工作。&lt;/p&gt;&#xA;&lt;h2 id=&#34;a-simple-testcase&#34;&gt;&#xA;  A Simple TestCase&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#a-simple-testcase&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;你可以使用一个假的声明的期望的class来代替OAuthApi的class，它这样用：&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; fudge&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;@fudge.patch&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;oauthtwitter.OAuthApi&amp;#39;&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;...&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;test&lt;/span&gt;(FakeOAuthApi):&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;...&lt;/span&gt;     (FakeOAuthApi&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;expects_call()&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;...&lt;/span&gt;                  &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;with_args(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;lt;consumer_key&amp;gt;&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;lt;consumer_secret&amp;gt;&amp;#39;&lt;/span&gt;,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;...&lt;/span&gt;                             &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;lt;oauth_token&amp;gt;&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;lt;oauth_token_secret&amp;gt;&amp;#39;&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;...&lt;/span&gt;                  &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;returns_fake()&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;...&lt;/span&gt;                  &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;expects(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;UpdateStatus&amp;#39;&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;with_arg_count(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;))&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;...&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;...&lt;/span&gt;     post_msg_to_twitter(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;hey there fellow testing freaks!&amp;#34;&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;让我们来分解一下：&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;测试阶段，patch装饰器将用一个假的对象临时的打一个补丁。并且使它作为一个参数，传入到测试方法中。这允许你添加你所想要的东西。&lt;/li&gt;&#xA;&lt;li&gt;这里你看到的这个fake对象，期望有一个方法被调用，这个方法使用4个指定的字符串作为参数。它返回了一个对象实例(一个新的fake对象)，它希望你使用一个参数调用fake_oauth.UpdateStatus()&lt;/li&gt;&#xA;&lt;li&gt;最后, post_msg_to_twitter() 被调用。让我们运行测试！&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; test()&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Sent: hey there fellow testing freaks&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;!&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;很高兴，它通过了。&lt;/p&gt;&#xA;&lt;p&gt;Fudge让你声明了你想要的或松散或紧密的期望(expectations)。如果你不关心确切的参数，你可以不调用fudge.Fake.with_args()。如果你不关心方法是不是真的被调用，你可以用fudge.Fake.provides()来代替fudge.Fake.expects()。同样的，当你不想为真实的参数值而操心，可以使用fudge.Fake.with_arg_count()。在其它方面有检测者，检测参数的值。&lt;/p&gt;&#xA;&lt;h2 id=&#34;fake-objects-without-patches-dependency-injection&#34;&gt;&#xA;  Fake objects without patches (dependency injection)&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#fake-objects-without-patches-dependency-injection&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;如果你不需要任何补丁，你可以使用fudge.test()装饰器。这将捕获任何一个被抛出的非预期的异常。这是一个例子：&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
